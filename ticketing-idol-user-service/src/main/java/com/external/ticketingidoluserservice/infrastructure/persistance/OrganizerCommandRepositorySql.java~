package com.external.ticketingidoluserservice.infrastructure.persistance;

import com.external.ticketingidoluserservice.domain.model.Organizer;
import com.external.ticketingidoluserservice.domain.repository.OrganizerCommandRepository;
import io.vertx.pgclient.PgPool;
import io.vertx.sqlclient.Tuple;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

public class OrganizerCommandRepositorySql implements OrganizerCommandRepository {
    private final PgPool pg;

    public OrganizerCommandRepositorySql(PgPool pg) { this.pg = pg; }


    @Override
    public CompletionStage<Void> save(Organizer organizer) {
        final String sql = """
            insert into organizers (user_id, organization_name, verified, created_at, updated_at)
            values ($1, $2, $3, $4, $5)
            on conflict (user_id) do update set
              organization_name = excluded.organization_name,
              verified = excluded.verified,
              updated_at = excluded.updated_at
            """;
        var params = Tuple.of(
                organizer.getUserId(),
                organizer.getOrganizationName(),
                organizer.isVerified(),
                HelperUtil.odt(organizer.getCreatedAt()),
                organizer.getUpdatedAt()
        );
        var fut = new CompletableFuture<Void>();
        pg.preparedQuery(sql).execute(params, ar -> {
            if (ar.succeeded()) fut.complete(null);
            else fut.completeExceptionally(ar.cause());
        });
        return fut;
    }
}
