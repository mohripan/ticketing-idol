package com.external.ticketingidoluserservice.infrastructure.web;

import com.external.ticketingidoluserservice.application.dto.request.RegisterUserRequest;
import com.external.ticketingidoluserservice.application.dto.response.UserResponse;
import com.external.ticketingidoluserservice.application.mapper.UserResponseMapper;
import com.external.ticketingidoluserservice.application.usecase.RegisterUserUseCase;
import com.external.ticketingidoluserservice.application.usecase.UserQueryUseCase;
import com.external.ticketingidoluserservice.domain.model.Email;
import io.vertx.core.Vertx;
import io.vertx.core.json.Json;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;

import java.util.UUID;

public class UserHttpHandler {
    private final Vertx vertx;
    private final RegisterUserUseCase registerUserUseCase;
    private final UserQueryUseCase userQueryUseCase;

    public UserHttpHandler(Vertx vertx, RegisterUserUseCase registerUserUseCase, UserQueryUseCase userQueryUseCase) {
        this.vertx = vertx;
        this.registerUserUseCase = registerUserUseCase;
        this.userQueryUseCase = userQueryUseCase;
    }

    public void registerRoutes(Router router) {
        router.get("/api/users/health").handler(this::handleHealthCheck);
        router.post("/api/users").handler(this::handleRegisterUser);
        router.get("/api/users/:id").handler(this::handleGetUserById);
        router.get("/api/users/email/:email").handler(this::handleGetUserByEmail);
        router.get("/api/users").handler(this::handleGetAllUsers);
    }

    private void handleRegisterUser(RoutingContext ctx) {
        RegisterUserRequest request = ctx.body().asPojo(RegisterUserRequest.class);

        registerUserUseCase.register(request.getUsername(), new Email(request.getEmail()), request.getPassword())
                .thenAccept(user -> {
                    UserResponse response = UserResponseMapper.toResponse(user);
                   ctx.response()
                           .putHeader("Content-Type", "application/json")
                           .setStatusCode(201)
                           .end(Json.encode(response));
                })
                .exceptionally(ex -> {
                    ctx.response().setStatusCode(500).end(ex.getMessage());
                    return null;
                });
    }

    private void handleGetAllUsers(RoutingContext ctx) {
        userQueryUseCase.findAll()
                .thenAccept(users -> {
                    var responseList = users.stream()
                            .map(UserResponseMapper::toResponse)
                            .toList();

                    UserListResponse response = new UserListResponse(responseList);

                    ctx.response()
                            .putHeader("Content-Type", "application/json")
                            .end(Json.encode(response));
                })
                .exceptionally(ex -> {
                    ctx.response().setStatusCode(500).end(ex.getMessage());
                    return null;
                });
    }

    private void handleGetUserByEmail(RoutingContext ctx) {
        String email = ctx.pathParam("email");
        userQueryUseCase.findByEmail(email)
                .thenAccept(optionalUser -> {
                    if (optionalUser.isPresent()) {
                        UserResponse response = UserResponseMapper.toResponse(optionalUser.get());
                        ctx.response()
                                .putHeader("Content-Type", "application/json")
                                .end(Json.encode(response));
                    } else {
                        ctx.response().setStatusCode(404).end("User not found");
                    }
                });
    }

    private void handleGetUserById(RoutingContext ctx) {
        UUID id = UUID.fromString(ctx.pathParam("id"));
        userQueryUseCase.findById(id)
                .thenAccept(optionalUser -> {
                    if (optionalUser.isPresent()) {
                        UserResponse response = UserResponseMapper.toResponse(optionalUser.get());
                        ctx.response()
                                .putHeader("Content-Type", "application/json")
                                .end(Json.encode(response));
                    } else {
                        ctx.response().setStatusCode(404).end("User not found");
                    }
                });
    }

    private void handleHealthCheck(RoutingContext ctx) {
        ctx.response()
                .putHeader("Content-Type", "application/json")
                .end("{\"status\": \"up\"}");
    }
}
